// Advanced exercises involving recursion

type Nat {
    zero
    succ(pred: Nat)
}

// Doubles a number
dbl(a: Nat): Nat // double
    case a {
        zero: Nat.zero
        succ: Nat.succ(Nat.succ(dbl(a.pred)))
    }

// Addition
add(a: Nat, b: Nat): Nat
    case a {
        zero: b
        succ: Nat.succ(add(a.pred, b))
    }

// Multiplication
mul(a: Nat, b: Nat): Nat
    case b {
        zero: Nat.zero
        succ: add(a, mul(a, b.pred))
    }

// Subtraction
// 4 - 5 = 0
// 5 - 4 = 1
sub(a: Nat, b: Nat): Nat
    case a {
        zero: Nat.zero
        succ: case b {
            zero: a
            succ: sub(a.pred, b.pred)
        }
    }

// Factorial
// 4! = 24
fac(a: Nat): Nat 
    case a {
        zero: Nat.succ(Nat.zero)
        succ: mul(a, fac(a.pred))
    }

// Equal
eql(a: Nat, b: Nat): Bool // Given 2 numbers, it returns true if the 2 are the same and false if they are different.
    case a b {
        zero zero: Bool.true
        succ succ: eql(a.pred, b.pred)
    } default Bool.false

// Do not use the "not" function to create the functions below

// Greater than
// 2 > 1 = True
// 3 > 3 = False
gtn(a: Nat, b: Nat): Bool // if A > B == True else false
    case a {
        zero: Bool.false
        succ: case b {
            zero: Bool.true
            succ: gtn(a.pred, b.pred)
        }
    }

// Lower than
// 1 < 2 = True
// 3 < 3 = False
ltn(a: Nat, b: Nat): Bool // if A > B == False else true 
    case b {
        zero: Bool.false
        succ: case a {
            zero: Bool.true
            succ: ltn(a.pred, b.pred)
        }
    }

// Minimum
// min(2, 3) = 2
// min(4, 1) = 1
min(a: Nat, b: Nat): Nat // if A < B then A else B
    case a b {
        succ succ: Nat.succ(min(a.pred, b.pred))
    } default Nat.zero

// Maximum
// max(2, 3) = 3
// max(4, 1) = 4
max(a: Nat, b: Nat): Nat // if A > B then A else B
    case a {
        zero: b
        succ: case b {
            zero: a
            succ: Nat.succ(max(a.pred, b.pred))
        }
    }

// Divides a number by two
// 2 / 2 = 1
// 5 / 2 = 2
// 1 / 2 = 0
hlf(a: Nat): Nat
    case a {
        zero: Nat.zero
        succ: case a.pred {
            zero: Nat.zero
            succ: Nat.succ(hlf(a.pred.pred))
        }
    }

// Division
// 1 / 2 = 0
// x / 0 = 0
// 5 / 2 = 2
div(a: Nat, b: Nat): Nat
    case b {
        zero: Nat.zero
        succ: div.aux(a, b)
    }

div.aux(a: Nat, b: Nat): Nat // division
    let less = ltn(a, b) 
    case less {
        true:  Nat.zero
        false: Nat.succ(div(sub(a, b), b))
    }


ex_04: IO<Unit>
    IO {
        Tests._04.dbl(dbl)
        Tests._04.add(add)
        Tests._04.mul(mul)
        Tests._04.sub(sub)
        Tests._04.fac(fac)
        Tests._04.eql(eql)
        Tests._04.gtn(gtn)
        Tests._04.ltn(ltn)
        Tests._04.min(min)
        Tests._04.max(max)
        Tests._04.hlf(hlf)
        Tests._04.div(div)
    }
