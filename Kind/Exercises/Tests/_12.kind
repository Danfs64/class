e000: Bits
  Bits.o(Bits.o(Bits.o(Bits.e)))


TestBMap: BitsMap<Nat>
  BitsMap.tie<Nat>(
    some(10), 
      BitsMap.tie<Nat>(some(15), 
        BitsMap.new<Nat>, BitsMap.new<Nat>), 
      BitsMap.tie<Nat>(some(20), 
        BitsMap.new<Nat>, BitsMap.new<Nat>))

TestBMap2: BitsMap<Nat>
  BitsMap.tie<Nat>(
    some(20), 
      BitsMap.tie<Nat>(some(30), 
        BitsMap.new<Nat>, BitsMap.new<Nat>), 
      BitsMap.tie<Nat>(some(60), 
        BitsMap.new<Nat>, 
        BitsMap.tie<Nat>(some(33),
          BitsMap.new<Nat>, BitsMap.new<Nat>)))

TestBMap3: BitsMap<Nat>
  BitsMap.tie<Nat>(
    some(20), 
      BitsMap.tie<Nat>(some(30), 
        BitsMap.new<Nat>, BitsMap.new<Nat>), 
      BitsMap.tie<Nat>(none, 
        BitsMap.new<Nat>, 
        BitsMap.tie<Nat>(some(66),
          BitsMap.new<Nat>, BitsMap.new<Nat>)))

TestBMap4: BitsMap<Nat>
  BitsMap.tie<Nat>(
    some(20), 
      BitsMap.tie<Nat>(some(30), 
        BitsMap.new<Nat>, BitsMap.new<Nat>), 
      BitsMap.tie<Nat>(some(39), 
        BitsMap.new<Nat>, 
        BitsMap.tie<Nat>(some(33),
          BitsMap.new<Nat>, BitsMap.new<Nat>)))


TestBMapSet1: BitsMap<Nat>
BitsMap.tie<Nat>(
    some(10), 
      BitsMap.tie<Nat>(some(15), 
        BitsMap.new<Nat>, 
        BitsMap.tie<Nat>(some(60), 
          BitsMap.new<Nat>, 
          BitsMap.new<Nat>)), 
      BitsMap.tie<Nat>(some(20), 
        BitsMap.new<Nat>, 
        BitsMap.new<Nat>))

TestBMapSet2: BitsMap<Nat>
  BitsMap.tie<Nat>(some(10), 
    BitsMap.tie<Nat>(some(12), 
      BitsMap.new<Nat>, 
      BitsMap.new<Nat>),
    BitsMap.tie<Nat>(some(20), 
      BitsMap.new<Nat>, 
      BitsMap.new<Nat>))


TestBMapSet3: BitsMap<Nat>
  BitsMap.tie<Nat>(some(666), 
    BitsMap.tie<Nat>(some(15), 
      BitsMap.new<Nat>, 
      BitsMap.new<Nat>),
    BitsMap.tie<Nat>(some(20), 
      BitsMap.new<Nat>, 
      BitsMap.new<Nat>))

TestBMapMut1: BitsMap<Nat>
  BitsMap.tie<Nat>(
    some(11), 
      BitsMap.tie<Nat>(some(15), 
        BitsMap.new<Nat>, BitsMap.new<Nat>), 
      BitsMap.tie<Nat>(some(20), 
        BitsMap.new<Nat>, BitsMap.new<Nat>))

TestBMapMut2: BitsMap<Nat>
  BitsMap.tie<Nat>(
    some(10), 
      BitsMap.tie<Nat>(some(15), 
        BitsMap.new<Nat>, BitsMap.new<Nat>), 
      BitsMap.tie<Nat>(some(40), 
        BitsMap.new<Nat>, BitsMap.new<Nat>))

TestBMapMut3: BitsMap<Nat>
  BitsMap.tie<Nat>(
    some(10), 
      BitsMap.tie<Nat>(some(7), 
        BitsMap.new<Nat>, BitsMap.new<Nat>), 
      BitsMap.tie<Nat>(some(20), 
        BitsMap.new<Nat>, BitsMap.new<Nat>))

TestBMapMut4: BitsMap<Nat>
  BitsMap.tie<Nat>(
    some(10), 
      BitsMap.tie<Nat>(some(15), 
        BitsMap.new<Nat>, BitsMap.new<Nat>), 
      BitsMap.tie<Nat>(some(19), 
        BitsMap.new<Nat>, BitsMap.new<Nat>))

TestBMapDel1: BitsMap<Nat>
  BitsMap.tie<Nat>(
    none, 
      BitsMap.tie<Nat>(some(15), 
        BitsMap.new<Nat>, BitsMap.new<Nat>), 
      BitsMap.tie<Nat>(some(20), 
        BitsMap.new<Nat>, BitsMap.new<Nat>))

TestBMapDel2: BitsMap<Nat>
  BitsMap.tie<Nat>(
    some(10), 
      BitsMap.tie<Nat>(some(15), 
        BitsMap.new<Nat>, BitsMap.new<Nat>)
      BitsMap.tie<Nat>(none,
        BitsMap.new<Nat>, BitsMap.new<Nat>)
  ) 


TestBMapDel3: BitsMap<Nat>
  BitsMap.tie<Nat>(
    some(10), 
      BitsMap.tie<Nat>(none, 
        BitsMap.new<Nat>, BitsMap.new<Nat>), 
      BitsMap.tie<Nat>(some(20), 
        BitsMap.new<Nat>, BitsMap.new<Nat>))

TestBMapFilter1: BitsMap<Nat>
  BitsMap.tie<Nat>(
    none, 
      BitsMap.tie<Nat>(some(15), 
        BitsMap.new<Nat>, BitsMap.new<Nat>), 
      BitsMap.tie<Nat>(none, 
        BitsMap.new<Nat>, BitsMap.new<Nat>))

TestBMapFilter2: BitsMap<Nat>
  BitsMap.tie<Nat>(
    some(10), 
      BitsMap.tie<Nat>(none, 
        BitsMap.new<Nat>, BitsMap.new<Nat>), 
      BitsMap.tie<Nat>(some(20), 
        BitsMap.new<Nat>, BitsMap.new<Nat>))

TestBMapFilter3: BitsMap<Nat>
  BitsMap.tie<Nat>(
    some(10), 
      BitsMap.tie<Nat>(none, 
        BitsMap.new<Nat>, BitsMap.new<Nat>), 
      BitsMap.tie<Nat>(none, 
        BitsMap.new<Nat>, BitsMap.new<Nat>))

TestBMapMap1: BitsMap<Nat>
  BitsMap.tie<Nat>(
    some(20), 
      BitsMap.tie<Nat>(some(30), 
        BitsMap.new<Nat>, BitsMap.new<Nat>), 
      BitsMap.tie<Nat>(some(40), 
        BitsMap.new<Nat>, BitsMap.new<Nat>))

TestBMapMap2: BitsMap<Nat>
  BitsMap.tie<Nat>(
    some(5), 
      BitsMap.tie<Nat>(some(7), 
        BitsMap.new<Nat>, BitsMap.new<Nat>), 
      BitsMap.tie<Nat>(some(10), 
        BitsMap.new<Nat>, BitsMap.new<Nat>))

TestBMapMap3: BitsMap<Nat>
  BitsMap.tie<Nat>(
    some(11), 
      BitsMap.tie<Nat>(some(16), 
        BitsMap.new<Nat>, BitsMap.new<Nat>), 
      BitsMap.tie<Nat>(some(21), 
        BitsMap.new<Nat>, BitsMap.new<Nat>))




Tests._12.set(set: <A: Type> -> Bits -> A -> BitsMap<A> -> BitsMap<A>): IO<Unit>
  IO {
    Assert.bitsmap<Nat>(Assert.nat.funcs, "set e10 60 TestBMap", set<Nat>(e10, 60, TestBMap), TestBMapSet1)
    Assert.bitsmap<Nat>(Assert.nat.funcs, "set e0 12 TestBMap" , set<Nat>(e0, 12, TestBMap), TestBMapSet2)
    Assert.bitsmap<Nat>(Assert.nat.funcs, "set e  666 TestBMap", set<Nat>(e, 666, TestBMap), TestBMapSet3)
    IO.print("set: All terms tested")
  }

Tests._12.get(get: <A: Type> -> Bits -> BitsMap<A> -> Maybe<A>): IO<Unit>
  IO {
    Assert.maybe<Nat>(Assert.nat.funcs, "get e TestBMap"  ,   get<Nat>(e,   TestBMap)  ,  Maybe.some<Nat>(10))
    Assert.maybe<Nat>(Assert.nat.funcs, "get e1 TestBMap" ,   get<Nat>(e1,   TestBMap) ,  Maybe.some<Nat>(20))
    Assert.maybe<Nat>(Assert.nat.funcs, "get e11 TestBMap",   get<Nat>(e11,   TestBMap),  Maybe.none<Nat>)
    Assert.maybe<Nat>(Assert.nat.funcs, "get e0 TestBMap" ,   get<Nat>(e0,   TestBMap) ,  Maybe.some<Nat>(15))
    Assert.maybe<Nat>(Assert.nat.funcs, "get e00 TestBMap",   get<Nat>(e00,   TestBMap),  Maybe.none<Nat>)
    Assert.maybe<Nat>(Assert.nat.funcs, "get e01 TestBMap",   get<Nat>(e00,   TestBMap),  Maybe.none<Nat>)
    Assert.maybe<Nat>(Assert.nat.funcs, "get e10 TestBMap",   get<Nat>(e00,   TestBMap),  Maybe.none<Nat>)
    IO.print("get: All terms tested")
  }

Tests._12.mut(mut: <A: Type> -> Bits -> (A -> A) -> BitsMap<A> -> BitsMap<A>): IO<Unit>
  IO {
    Assert.bitsmap<Nat>(Assert.nat.funcs, "mut e inc TestBMap", mut<Nat>(e, Nat.succ, TestBMap), TestBMapMut1)
    Assert.bitsmap<Nat>(Assert.nat.funcs, "mut e1 dbl TestBMap", mut<Nat>(e1, Nat.double, TestBMap), TestBMapMut2)
    Assert.bitsmap<Nat>(Assert.nat.funcs, "mut e0 hlf TestBMap", mut<Nat>(e0, Nat.half, TestBMap), TestBMapMut3)
    Assert.bitsmap<Nat>(Assert.nat.funcs, "mut e1 dec TestBMap", mut<Nat>(e1, Nat.pred, TestBMap), TestBMapMut4)
    IO.print("mut: All terms tested")
  }

Tests._12.del(del: <A: Type> -> Bits -> BitsMap<A> -> BitsMap<A>): IO<Unit>
  IO {
    Assert.bitsmap<Nat>(Assert.nat.funcs, "del e TestBMap"   , del<Nat>(e, TestBMap), TestBMapDel1)
    Assert.bitsmap<Nat>(Assert.nat.funcs, "del e1 TestBMap"  , del<Nat>(e1, TestBMap), TestBMapDel2)
    Assert.bitsmap<Nat>(Assert.nat.funcs, "del e0 TestBMap"  , del<Nat>(e0, TestBMap), TestBMapDel3)
    Assert.bitsmap<Nat>(Assert.nat.funcs, "del e000 TestBMap", del<Nat>(e000, TestBMap), TestBMap)
    Assert.bitsmap<Nat>(Assert.nat.funcs, "del e111 TestBMap", del<Nat>(e111, TestBMap), TestBMap)
    IO.print("del: All terms tested")
  }

Tests._12.has(del: <A: Type> -> Bits -> BitsMap<A> -> Bool): IO<Unit>
  IO {
    Assert.bool("has e TestBMap"  , has<Nat>(e, TestBMap),  Bool.true)
    Assert.bool("has e1 TestBMap" , has<Nat>(e1, TestBMap), Bool.true)
    Assert.bool("has e0 TestBMap" , has<Nat>(e0, TestBMap), Bool.true)
    Assert.bool("has e01 TestBMap", has<Nat>(e01, TestBMap), Bool.false)
    Assert.bool("has e10 TestBMap", has<Nat>(e10, TestBMap), Bool.false)
    IO.print("has: All terms tested")
  }

Tests._12.filter(filter: <A: Type> -> (A -> Bool) -> BitsMap<A> -> BitsMap<A>): IO<Unit>
  IO {
    Assert.bitsmap<Nat>(Assert.nat.funcs, "filter Nat.odd TestBMap"  , filter<Nat>(Nat.odd, TestBMap), TestBMapFilter1)
    Assert.bitsmap<Nat>(Assert.nat.funcs, "filter Nat.is_even TestBMap"  , filter<Nat>(Nat.is_even, TestBMap), TestBMapFilter2)
    Assert.bitsmap<Nat>(Assert.nat.funcs, "filter Nat.eql(10) TestBMap"  , filter<Nat>(Nat.eql(10), TestBMap), TestBMapFilter3)
    IO.print("filter: All terms tested")
  }

Tests._12.map(map: <A: Type, B: Type> -> (A -> B) -> BitsMap<A> -> BitsMap<B>): IO<Unit>
  IO {
    Assert.bitsmap<Nat>(Assert.nat.funcs, "map dbl TestBMap" , map<Nat, Nat>(Nat.double, TestBMap), TestBMapMap1)
    Assert.bitsmap<Nat>(Assert.nat.funcs, "map half TestBMap", map<Nat, Nat>(Nat.half, TestBMap)  , TestBMapMap2)
    Assert.bitsmap<Nat>(Assert.nat.funcs, "map inc TestBMap" , map<Nat, Nat>(Nat.succ, TestBMap)  , TestBMapMap3)
    IO.print("map: All terms tested")
  }

Tests._12.key(key: <A: Type> -> BitsMap<A> -> List<Bits>): IO<Unit>
  IO {
    Assert.list_u<Bits>(Assert.bits.funcs, "key TestBMap", key<Nat>(TestBMap), BitsMap.keys<Nat>(TestBMap))
    Assert.list_u<Bits>(Assert.bits.funcs, "key TestBMap", key<Nat>(TestBMapDel2), BitsMap.keys<Nat>(TestBMapDel2))
    IO.print("key: All terms tested")
  }

Tests._12.union(union: <A: Type> -> BitsMap<A> -> BitsMap<A> -> BitsMap<A>): IO<Unit>
  IO {
    Assert.bitsmap<Nat>(Assert.nat.funcs, "union TestBMap TestBMap2", union<Nat>(TestBMap, TestBMap2), BitsMap.union<Nat>(TestBMap, TestBMap2))
    Assert.bitsmap<Nat>(Assert.nat.funcs, "union TestBMap3 TestBMap4", union<Nat>(TestBMap3, TestBMap4), BitsMap.union<Nat>(TestBMap3, TestBMap4))
    IO.print("union: All terms tested")
  }