Assert.list_u<A: Type>(
  list_functions: Assert.func<A>
  name: String
  result: List<A>
  expected: List<A>
): IO<Unit>
  let { fst, snd } = list_functions
  let eql  = seql<A>(fst)
  let show = List.show<A>(snd)
  Assert<List<A>>({ eql, show }, expected, result, name)

seql.go<A: Type>(xs: List<A>, ys: List<A>, bcum: List<A>, cond: A -> A -> Bool, result: Bool): Bool
  case xs {
    nil: case ys {
        nil:  result
        cons: Bool.false
      }
    cons: case ys {
        nil:  Bool.false
        cons: case cond(xs.head, ys.head) {
                true: seql.go<A>(xs.tail, List.concat<A>(ys.tail, bcum), [], cond, Bool.true)
                false: case ys.tail { 
                  nil: Bool.false
                  cons: seql.go<A>(xs, ys.tail, List.cons<A>(ys.head, bcum), cond, Bool.false)
                }
        }
    }
  }

seql<A: Type>(cond: A -> A -> Bool, xs: List<A>, ys: List<A>): Bool
  seql.go<A>(xs, ys, [], cond, Bool.false)