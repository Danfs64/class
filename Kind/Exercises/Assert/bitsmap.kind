BitsMap.eql<A: Type>(eqlFn: A -> A -> Bool, map1: BitsMap<A>, map2: BitsMap<A>): Bool
  case map1 map2 {
    new new: true
    tie tie: case Maybe.eql<A>(eqlFn, map1.val, map2.val) {
      true: BitsMap.eql<A>(eqlFn, map1.lft, map2.lft) && BitsMap.eql<A>(eqlFn, map1.rgt, map2.rgt)
      false: false
    }
  } default false

BitsMap.show<A: Type>(show: A -> String, map: BitsMap<A>): String
  BitsMap.show.go<A>(1, show, map)

BitsMap.show.go<A: Type>(depth: Nat, show: A -> String, map: BitsMap<A>): String
  let n = String.repeat(" ", depth)
    case map {
      new: " Empty"
      tie:
        " Tie(" | Maybe.show<A>(show, map.val) |
        "\n " | n | "Lft: " | BitsMap.show.go<A>(depth +1, show, map.lft) |
        "\n " | n | "Rgt: " | BitsMap.show.go<A>(depth +1, show, map.rgt) | ")"
    }

Assert.bitsmap<A: Type>(
  bitsmap_functions: Assert.func<A>
  name: String
  result: BitsMap<A>
  expected: BitsMap<A>
): IO<Unit>
  let { fst, snd } = bitsmap_functions
  let eql  = BitsMap.eql<A>(fst)
  let show = BitsMap.show<A>(snd)
  Assert<BitsMap<A>>({ eql, show }, expected, result, name)